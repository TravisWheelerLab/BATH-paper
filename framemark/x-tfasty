#! /usr/bin/perl 

# Run a framemark benchmark with tfasty.
#
# Usage:      x-tfasty <execdir> <scriptdir> <outdir> <outname> <queryfile> <posfile> <fafile> <cpus> <e-max>
# Example:  /home/user/FraHMMER-paper/framemark/x-tfasty /home/user/fasta36/bin /home/user/FraHMMER-paper/framemark  /home/user/framemark-results  framemark-00fs /home/user/framemark-files/framemark-00fs.seq /home/user/framemark-files/framemark-00fs.pos /home/user/framemark-files/framemark-00fs.fa 16 100
#

use Time::HiRes;

$usage = "Usages: $0 \n\t<execdir>\n\t<scriptdir>\n\t<outdir>\n\t<outname>\n\t<queryfile>\n\t<posfile>\n\t<targetfile>\n\t<cpus>\n\t<e-max>\n";
if (scalar(@ARGV) != 9) { printf("$usage\n"); exit(1); }

($execdir, $scriptdir, $outdir, $outname, $queryfile, $posfile, $targetfile, $cpus, $emax) = @ARGV;
$outfile        = $outname . ".out";
$tmpoutfile     = $outfile . ".tmp";
$sorttmpoutfile = $outfile . ".tmp.sort";

$idscript   = "$scriptdir/framemark-idpositives.pl";
$tfasty     = "$execdir/tfasty36";

if (! -d $execdir)                                      { die "didn't find executable directory $execdir"; }
if (! -d $scriptdir)                                    { die "didn't find script directory $scriptdir"; }
if (! -x $tfasty)                                       { die "didn't find executable $tfasty"; }
if (! -e $outdir)                                       { die "$outdir doesn't exist"; }
if (! -e $posfile)                                      { die "$posfile doesn't exist"; }
if (! -e $idscript)                                     { die "positive identification script $idscript doesn't exist"; }

open(TMPOUTFILE,">$outdir/$tmpoutfile") || die "failed to open $tmpoutfile";

$runtime = -1 * Time::HiRes::time();

#run tfasty
$command = "$tfasty -T $cpus -E $emax -m 9 $queryfile $targetfile > $outdir/$outname.tmp";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }

$runtime += Time::HiRes::time();

open(OUTPUT, "$outdir/$outname.tmp") || die "FAILED: to open $outdir/$outname.tmp tabular output file";
my $query;
my $full_query;

while (<OUTPUT>)
{
    if (/^\s*\d+>>>/) { 
	$query = (split('>', $_))[3];
        $full_query = (split(' ', $query))[0];
        $query = (split('\.', $full_query))[1];
    }
    elsif(/^framemark\d*\s*\(/ || /\+-/) {
        @fields   = split(' ', $_, 22);
    	$target      = $fields[0];
    	if ($target =~ /\+-/) { $target = $last_target; }
    	else                  { $last_target = $target; }
    	$target_from = $fields[15];
    	$target_to   = $fields[16];
    	$bitscore    = $fields[5];
    	$evalue      = $fields[6];
    	$frameshifts = $fields[21];
    	printf TMPOUTFILE "%10g %10.1f %10d %10d %20s %35s %5d  %35s\n", $evalue, $bitscore, $target_from, $target_to, $target, $query, $frameshifts;
    }

}


close TMPOUTFILE;
close OUTPUT;
open(TIME, ">" . "$outdir/$outname.time");
printf TIME ("$outname %.2f seconds\n", $runtime);    
close(TIME);



$command = "sort -g $outdir/$tmpoutfile > $outdir/$sorttmpoutfile";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }

$command = "perl $idscript $posfile $outdir/$sorttmpoutfile > $outdir/$outfile";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }

 

#! /usr/bin/perl 

# Run a transmark benchmark with last.
#
# Usage:      x-last <execdir> <scriptdir> <outdir> <outname> <queryfile> <posfile> <fafile> <cpus> <e-max>
# Example:  /home/user/FraHMMER-paper/transmark/x-last /home/user/last/bin /home/user/FraHMMER-paper/transmark  /home/user/transmark-results/last  transmark-00fs /home/user/transmark-files/transmark-00fs.seq /home/user/transmark-files/transmark-00fs.pos /home/user/transmark-files/transmark-00fs.fa 16 100
#

use Time::HiRes;

$usage = "Usage: $0 \n\t<execdir>\n\t<scriptdir>\n\t<outdir>\n\t<outname>\n\t<queryfile>\n\t<posfile>\n\t<targetfile>\n\t<cpus>\n\t<e-max>\n\t<targetlength>\n"; 
if(scalar(@ARGV) != 10) { printf("$usage\n$options_usage"); exit(1); }

($execdir, $scriptdir, $outdir, $outname, $queryfile, $posfile, $targetfile, $cpus, $emax, $targetlen) = @ARGV;
$outfile        = $outname . ".out";
$tmpoutfile     = $outfile . ".tmp";
$sorttmpoutfile = $outfile . ".tmp.sort";

$idscript   = "$scriptdir/transmark-idpositives.pl";
$lastal     = "$execdir/lastal";

$trainfile = $posfile;
chop($trainfile);
chop($trainfile);
chop($trainfile);
chop($trainfile);

$trainfile = $trainfile . ".train";

if (! -d $execdir)                                      { die "didn't find executable directory $execdir"; }
if (! -d $scriptdir)                                    { die "didn't find script directory $scriptdir"; }
if (! -x $lastal)                                       { die "didn't find executable $lastal"; }
if (! -e $outdir)                                       { die "$outdir doesn't exist"; }
if (! -e $posfile)                                      { die "$posfile doesn't exist"; }
if (! -e $trainfile)                                    { die "$trainfile doesn't exist"; }
if (! -e $idscript)                                     { die "positive identification script $idscript doesn't exist"; }

$emax = $targetlen / $emax;

open(TMPOUTFILE,">$outdir/$tmpoutfile") || die "failed to open $tmpoutfile";

$runtime = -1 * Time::HiRes::time();

# run last
$command = "$lastal -p $trainfile -P$cpus -D$emax -K1 -fTAB $queryfile.db $targetfile  > $outdir/$outname.tmp";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }

$runtime += Time::HiRes::time();

open(OUTPUT, "$outdir/$outname.tmp") || die "FAILED: to open $outdir/$outname.tmp tabular output file"; 

my $query;

while (<OUTPUT>)
{
 if (/^\#/) { next; }
   @fields   = split(' ', $_, 14);
   $target      = $fields[6];
   $query       =  (split(/\./, $fields[1]))[1];
   if (index($fields[9], '+') != -1) {
     $target_from = $fields[7] + 1;
     $target_to = $target_from + $fields[8] - 1;
   }
   else                              {
     $target_from = $fields[10]  - $fields[7];
     $target_to   = $target_from - $fields[8] + 1;
   }
   $bitscore    = $fields[0];
   @efield        = split('=', $fields[13], 2);
   $evalue      = $efield[1];
   $frameshifts = 0;
   $frameshifts += () = $fields[11] =~ /:-2,/g;
   $frameshifts += () = $fields[11] =~ /:-1,/g;
   $frameshifts += () = $fields[11] =~ /:1,/g;
   $frameshifts += () = $fields[11] =~ /:2,/g;
   printf TMPOUTFILE "%10g %10.1f %10d %10d %20s %35s %5d\n", $evalue, $bitscore, $target_from, $target_to, $target, $query, $frameshifts;
}

open(TIME, ">" . "$outdir/$outname.time");
printf TIME ("$outname %.2f seconds\n", $runtime);    
close(TIME);

close TMPOUTFILE;

$command = "sort -g $outdir/$tmpoutfile > $outdir/$sorttmpoutfile";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }

$command = "perl $idscript $posfile $outdir/$sorttmpoutfile > $outdir/$outfile";
$status = system("$command");
if ($status != 0) { die "FAILED: $command"; }
 
